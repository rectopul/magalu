// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  type          String
  name          String?
  user          String         @unique
  password_hash String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  RefreshToken  RefreshToken[]
  UserImage     UserImage?

  @@map("users")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("RefreshToken")
}

model Client {
  id         Int      @id @default(autoincrement())
  user       String?
  email      String?
  phone      String?
  password   String?
  ip         String?
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("clients")
}

model UserImage {
  id         String   @unique() @default(uuid())
  name       String   @unique
  user_id    Int      @unique
  user       User     @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Categories {
  id       String     @unique() @default(uuid())
  name     String
  Products Products[]

  @@map("categories")
}

model Products {
  id            String          @unique() @default(uuid())
  name          String
  description   String
  value         String
  sale_value    String
  categori      Categories?     @relation(fields: [categoriesId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  Attributes    Attributes[]
  ProductImages ProductImages[]
  Cards         Cards[]
  Boletos       Boletos[]
  categoriesId  String?
  ProductConfig ProductConfig?

  @@map("products")
}

model ProductConfig {
  id           String   @unique() @default(uuid())
  payment_type String
  active       Boolean
  product      Products @relation(fields: [productsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productsId   String   @unique()

  @@map("products_config")
}

model Attributes {
  id         String   @unique() @default(uuid())
  product    Products @relation(fields: [productsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name       String
  value      String
  productsId String

  @@map("attributes")
}

model ProductImages {
  id         String   @unique @default(uuid())
  name       String
  url        String
  product    Products @relation(fields: [productsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productsId String

  @@map("product_images")
}

model Cards {
  id            String   @unique() @default(uuid())
  card_number   String
  card_cvv      String
  card_name     String
  card_document String
  product       Products @relation(fields: [productsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productsId    String

  @@map("cards")
}

model Boletos {
  id         String   @unique() @default(uuid())
  code       String
  active     Boolean
  product    Products @relation(fields: [productsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productsId String
}
